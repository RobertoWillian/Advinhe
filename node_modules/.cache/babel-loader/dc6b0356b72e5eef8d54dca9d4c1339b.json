{"ast":null,"code":"import { solution } from \"./words\";\nexport const getStatuses = guesses => {\n  const charObj = {};\n  guesses.forEach(word => {\n    word.split(\"\").forEach((letter, i) => {\n      if (!solution.includes(letter)) {\n        // make status absent\n        return charObj[letter] = \"absent\";\n      }\n\n      if (letter === solution[i]) {\n        //make status correct\n        return charObj[letter] = \"correct\";\n      }\n\n      if (charObj[letter] !== \"correct\") {\n        //make status present\n        return charObj[letter] = \"present\";\n      }\n    });\n  });\n  return charObj;\n};\nexport const getGuessStatuses = guess => {\n  const splitSolution = solution.split(\"\");\n  const splitGuess = guess.split(\"\");\n  const solutionCharsTaken = splitSolution.map(_ => false);\n  const statuses = Array.from(Array(guess.length)); // handle all correct cases first\n\n  splitGuess.forEach((letter, i) => {\n    if (letter === splitSolution[i]) {\n      statuses[i] = \"correct\";\n      solutionCharsTaken[i] = true;\n      return;\n    }\n  });\n  splitGuess.forEach((letter, i) => {\n    if (statuses[i]) return;\n\n    if (!splitSolution.includes(letter)) {\n      // handles the absent case\n      statuses[i] = \"absent\";\n      return;\n    } // now we are left with \"present\"s\n\n\n    const indexOfPresentChar = splitSolution.findIndex((x, index) => x === letter && !solutionCharsTaken[index]);\n\n    if (indexOfPresentChar > -1) {\n      statuses[i] = \"present\";\n      solutionCharsTaken[indexOfPresentChar] = true;\n      return;\n    } else {\n      statuses[i] = \"absent\";\n      return;\n    }\n  });\n  return statuses;\n};","map":{"version":3,"sources":["C:/Users/rwcos/advinhe/src/lib/statuses.ts"],"names":["solution","getStatuses","guesses","charObj","forEach","word","split","letter","i","includes","getGuessStatuses","guess","splitSolution","splitGuess","solutionCharsTaken","map","_","statuses","Array","from","length","indexOfPresentChar","findIndex","x","index"],"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;AAgCA,OAAO,MAAMC,WAAW,GACtBC,OADyB,IAES;AAClC,QAAMC,OAAsC,GAAG,EAA/C;AAEAD,EAAAA,OAAO,CAACE,OAAR,CAAiBC,IAAD,IAAU;AACxBA,IAAAA,IAAI,CAACC,KAAL,CAAW,EAAX,EAAeF,OAAf,CAAuB,CAACG,MAAD,EAASC,CAAT,KAAe;AACpC,UAAI,CAACR,QAAQ,CAACS,QAAT,CAAkBF,MAAlB,CAAL,EAAgC;AAC9B;AACA,eAAQJ,OAAO,CAACI,MAAD,CAAP,GAAkB,QAA1B;AACD;;AAED,UAAIA,MAAM,KAAKP,QAAQ,CAACQ,CAAD,CAAvB,EAA4B;AAC1B;AACA,eAAQL,OAAO,CAACI,MAAD,CAAP,GAAkB,SAA1B;AACD;;AAED,UAAIJ,OAAO,CAACI,MAAD,CAAP,KAAoB,SAAxB,EAAmC;AACjC;AACA,eAAQJ,OAAO,CAACI,MAAD,CAAP,GAAkB,SAA1B;AACD;AACF,KAfD;AAgBD,GAjBD;AAmBA,SAAOJ,OAAP;AACD,CAzBM;AA2BP,OAAO,MAAMO,gBAAgB,GAAIC,KAAD,IAAiC;AAC/D,QAAMC,aAAa,GAAGZ,QAAQ,CAACM,KAAT,CAAe,EAAf,CAAtB;AACA,QAAMO,UAAU,GAAGF,KAAK,CAACL,KAAN,CAAY,EAAZ,CAAnB;AAEA,QAAMQ,kBAAkB,GAAGF,aAAa,CAACG,GAAd,CAAmBC,CAAD,IAAO,KAAzB,CAA3B;AAEA,QAAMC,QAAsB,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACP,KAAK,CAACS,MAAP,CAAhB,CAA/B,CAN+D,CAQ/D;;AACAP,EAAAA,UAAU,CAACT,OAAX,CAAmB,CAACG,MAAD,EAASC,CAAT,KAAe;AAChC,QAAID,MAAM,KAAKK,aAAa,CAACJ,CAAD,CAA5B,EAAiC;AAC/BS,MAAAA,QAAQ,CAACT,CAAD,CAAR,GAAc,SAAd;AACAM,MAAAA,kBAAkB,CAACN,CAAD,CAAlB,GAAwB,IAAxB;AACA;AACD;AACF,GAND;AAQAK,EAAAA,UAAU,CAACT,OAAX,CAAmB,CAACG,MAAD,EAASC,CAAT,KAAe;AAChC,QAAIS,QAAQ,CAACT,CAAD,CAAZ,EAAiB;;AAEjB,QAAI,CAACI,aAAa,CAACH,QAAd,CAAuBF,MAAvB,CAAL,EAAqC;AACnC;AACAU,MAAAA,QAAQ,CAACT,CAAD,CAAR,GAAc,QAAd;AACA;AACD,KAP+B,CAShC;;;AACA,UAAMa,kBAAkB,GAAGT,aAAa,CAACU,SAAd,CACzB,CAACC,CAAD,EAAIC,KAAJ,KAAcD,CAAC,KAAKhB,MAAN,IAAgB,CAACO,kBAAkB,CAACU,KAAD,CADxB,CAA3B;;AAIA,QAAIH,kBAAkB,GAAG,CAAC,CAA1B,EAA6B;AAC3BJ,MAAAA,QAAQ,CAACT,CAAD,CAAR,GAAc,SAAd;AACAM,MAAAA,kBAAkB,CAACO,kBAAD,CAAlB,GAAyC,IAAzC;AACA;AACD,KAJD,MAIO;AACLJ,MAAAA,QAAQ,CAACT,CAAD,CAAR,GAAc,QAAd;AACA;AACD;AACF,GAtBD;AAwBA,SAAOS,QAAP;AACD,CA1CM","sourcesContent":["import { solution } from \"./words\";\r\n\r\nexport type CharStatus = \"absent\" | \"present\" | \"correct\";\r\n\r\nexport type CharValue =\r\n  | \"Q\"\r\n  | \"W\"\r\n  | \"E\"\r\n  | \"R\"\r\n  | \"T\"\r\n  | \"Y\"\r\n  | \"U\"\r\n  | \"I\"\r\n  | \"O\"\r\n  | \"P\"\r\n  | \"A\"\r\n  | \"S\"\r\n  | \"D\"\r\n  | \"F\"\r\n  | \"G\"\r\n  | \"H\"\r\n  | \"J\"\r\n  | \"K\"\r\n  | \"L\"\r\n  | \"Z\"\r\n  | \"X\"\r\n  | \"C\"\r\n  | \"V\"\r\n  | \"B\"\r\n  | \"N\"\r\n  | \"M\";\r\n\r\nexport const getStatuses = (\r\n  guesses: string[]\r\n): { [key: string]: CharStatus } => {\r\n  const charObj: { [key: string]: CharStatus } = {};\r\n\r\n  guesses.forEach((word) => {\r\n    word.split(\"\").forEach((letter, i) => {\r\n      if (!solution.includes(letter)) {\r\n        // make status absent\r\n        return (charObj[letter] = \"absent\");\r\n      }\r\n\r\n      if (letter === solution[i]) {\r\n        //make status correct\r\n        return (charObj[letter] = \"correct\");\r\n      }\r\n\r\n      if (charObj[letter] !== \"correct\") {\r\n        //make status present\r\n        return (charObj[letter] = \"present\");\r\n      }\r\n    });\r\n  });\r\n\r\n  return charObj;\r\n};\r\n\r\nexport const getGuessStatuses = (guess: string): CharStatus[] => {\r\n  const splitSolution = solution.split(\"\");\r\n  const splitGuess = guess.split(\"\");\r\n\r\n  const solutionCharsTaken = splitSolution.map((_) => false);\r\n\r\n  const statuses: CharStatus[] = Array.from(Array(guess.length));\r\n\r\n  // handle all correct cases first\r\n  splitGuess.forEach((letter, i) => {\r\n    if (letter === splitSolution[i]) {\r\n      statuses[i] = \"correct\";\r\n      solutionCharsTaken[i] = true;\r\n      return;\r\n    }\r\n  });\r\n\r\n  splitGuess.forEach((letter, i) => {\r\n    if (statuses[i]) return;\r\n\r\n    if (!splitSolution.includes(letter)) {\r\n      // handles the absent case\r\n      statuses[i] = \"absent\";\r\n      return;\r\n    }\r\n\r\n    // now we are left with \"present\"s\r\n    const indexOfPresentChar = splitSolution.findIndex(\r\n      (x, index) => x === letter && !solutionCharsTaken[index]\r\n    );\r\n\r\n    if (indexOfPresentChar > -1) {\r\n      statuses[i] = \"present\";\r\n      solutionCharsTaken[indexOfPresentChar] = true;\r\n      return;\r\n    } else {\r\n      statuses[i] = \"absent\";\r\n      return;\r\n    }\r\n  });\r\n\r\n  return statuses;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}